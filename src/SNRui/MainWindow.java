package SNRui;

import additionalFunction.workWithArray;
import additionalFunction.workWithFiles;
import additionalFunction.commonWork;
import additionalFunction.workWithTable;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;


import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;


public class MainWindow extends JFrame {
    private JPanel panel; // панель
    private JButton button1; // кнопка загрузки файла
    private JTable table1; // таблица с данными
    private JButton calculateButton; //кнопка для вычисления
    private JButton downloadExampleFileButton; //кнопка для загрузки файла примера
    private JTextField textField1; //текстовое поле для ввода значения SNR
    private JButton clearTableButton; // кнопка очистки таблицы
    private JButton changeSignAndReloadButton; // кнопка по изменению знака и перерисовке таблицы
    private JButton saveTableButton;
    private DefaultTableModel tableModel; // модель таблицы
    private ArrayList<Object[]> matrix = new ArrayList<>(); // матрица
    private int columnCount = 0; // количество колонок
    private ArrayList<String> meanWhileList = new ArrayList<>(); //массив мат ожиданий
    private ArrayList<String> varianceList = new ArrayList<>(); // массив дисперсии
    private ArrayList<String> SNRList = new ArrayList<>(); // масиив значений SNR
    private ArrayList<String> ABSmeanWhile = new ArrayList<>(); // массив модуля мат ожиданий
    public static double SNRVar; // значение SNR из текстового поля


    public MainWindow() {
        //добавляем панель
        this.getContentPane().add(panel);
        String col[] = {};
        //создаем DefaultTableModel для нашей таблицы
        tableModel = new DefaultTableModel(col, 0);
        //устанавливаем DefaultTableModel в нашу таблицу
        table1.setModel(tableModel);

        //лисенер для загрузки файла
        button1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                columnCount = workWithFiles.downloadFile(tableModel, matrix);
            }
        });

        //лисенер для простых вычислений
        calculateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //Заносим в переменную значение из поля
                SNRVar = Double.parseDouble(textField1.getText());
                //Вызываем функцию для простого подсчета
                commonWork.commonCalculateSNR(tableModel, meanWhileList, ABSmeanWhile, varianceList, SNRList, columnCount, matrix, table1);
                //подсчитываем и выводим сумму действующей ОСШ и сумму по строке
                workWithTable.alertWithSumSNR(SNRList);
            }
        });

        //лисенер для загрузки файла
        downloadExampleFileButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //возвращает количество колонок и загружает файл
                columnCount = workWithFiles.downloadExampleFile(tableModel, matrix);
            }
        });
        //Очистка таблицы
        clearTableButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                workWithTable.clearTable(tableModel);
            }
        });
        //изменение знака и перерисовка таблицы
        changeSignAndReloadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //Очистка таблицы
                workWithTable.clearTable(tableModel);
                //Смена знака у колонки
                workWithArray.changeSing(matrix, 1);
                //Вывод таблицы на экран
                workWithTable.conclusionTable(matrix, tableModel);
            }
        });
        saveTableButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    workWithFiles.saveFile(table1);
                } catch (Exception e1) {
                    e1.printStackTrace();
                }

            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(22, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel.setPreferredSize(new Dimension(30, 30));
        button1 = new JButton();
        button1.setActionCommand("Download file");
        button1.setAlignmentX(0.0f);
        button1.setAlignmentY(0.0f);
        button1.setAutoscrolls(false);
        button1.setBorderPainted(true);
        button1.setHideActionText(false);
        button1.setHorizontalAlignment(2);
        button1.setLabel("Download file");
        button1.setMargin(new Insets(0, 0, 0, 0));
        button1.setText("Download file");
        button1.setVerticalAlignment(1);
        button1.setVerticalTextPosition(1);
        panel.add(button1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        calculateButton = new JButton();
        calculateButton.setAlignmentY(0.0f);
        calculateButton.setText("Calculate");
        panel.add(calculateButton, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField1 = new JTextField();
        textField1.setText("1");
        panel.add(textField1, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        downloadExampleFileButton = new JButton();
        downloadExampleFileButton.setText("Download example file");
        panel.add(downloadExampleFileButton, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        table1 = new JTable();
        panel.add(table1, new GridConstraints(0, 3, 22, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(500, 50), null, 0, false));
        clearTableButton = new JButton();
        clearTableButton.setText("Clear table");
        clearTableButton.setVisible(true);
        panel.add(clearTableButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        changeSignAndReloadButton = new JButton();
        changeSignAndReloadButton.setText("Change sign and reload table");
        panel.add(changeSignAndReloadButton, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        saveTableButton = new JButton();
        saveTableButton.setText("Save Table");
        panel.add(saveTableButton, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}


